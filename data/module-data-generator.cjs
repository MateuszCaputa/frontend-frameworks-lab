const fs = require("fs");
const path = require("path");

const DOMAIN = "wsei.edu.pl";
const OUTPUT_FILE_PATH = path.join(__dirname, "..", "src", "module-data.js");
const NAMES_FILE_PATH = path.join(__dirname, "names.txt");

const generateRandomPhone = () => {
  const randomDigits = () => Math.floor(100 + Math.random() * 900);
  return `${randomDigits()}-${randomDigits()}-${randomDigits()}`;
};

const generateRandomDate = () => {
  const start = new Date(2000, 0, 1).getTime();
  const end = new Date(2005, 11, 31).getTime();
  const randomTime = start + Math.random() * (end - start);
  return new Date(randomTime).toISOString().split("T")[0];
};

const count = Number(process.argv[2]);

if (isNaN(count) || count <= 0) {
  console.error("Error: Please provide a valid number of objects to generate.");
  process.exit(1);
}

if (fs.existsSync(OUTPUT_FILE_PATH)) {
  console.log(
    `[Skipped] ${path.basename(
      OUTPUT_FILE_PATH
    )} already exists. Delete it to regenerate.`
  );
  process.exit(0);
}

fs.readFile(NAMES_FILE_PATH, "utf8", (err, data) => {
  if (err) {
    console.error(`Error reading names file: ${err}`);
    return;
  }

  const names = data
    .split(/\s+/)
    .map((s) => s.trim())
    .filter((n) => n.length > 0);
  if (names.length === 0) {
    console.error("Error: The names file is empty.");
    return;
  }

  let people = [];
  let nameCounts = {};

  for (let i = 0; i < count; i++) {
    const randomName = names[Math.floor(Math.random() * names.length)];

    nameCounts[randomName] = (nameCounts[randomName] || 0) + 1;
    const countSuffix =
      nameCounts[randomName] > 1 ? nameCounts[randomName] : "";
    const email = `${randomName.toLowerCase()}${countSuffix}@${DOMAIN}`;

    people.push({
      id: i + 1,
      name: randomName,
      birthDate: generateRandomDate(),
      email: email,
      phone: generateRandomPhone(),
    });
  }

  let content = `// Generated by module-data-generator.cjs\n`;
  content += `export const people = ${JSON.stringify(people, null, 4)};\n`;

  fs.writeFile(OUTPUT_FILE_PATH, content, (err) => {
    if (err) {
      console.error(`Error writing file: ${err}`);
    } else {
      console.log(
        `Successfully generated ${people.length} objects in ${path.basename(
          OUTPUT_FILE_PATH
        )}`
      );
    }
  });
});
